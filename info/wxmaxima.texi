\input texinfo
@setfilename  wxmaxima.info
@finalout

@c -*-texinfo-*-

@c 
@c Based on a file from the maxima sources that was created from
@c Jim Van Zandt <jrv@vanzandt.mv.com>

@c to update the menus do: 
@c (texinfo-multiple-files-update "wxMaxima.texi" t t)
@c
@c texinfo-multiple-files-update will delete the detailed node listing!


@c %**start of header
@settitle wxMaxima Manual

@synindex ky fn
@synindex vr fn
@synindex cp fn

@c %**end of header

@include category-macros.texi

@ifinfo
This is a Texinfo wxMaxima manual based on the maxima
manual which is Copyright 1994,2001 William F. Schelter

@format
INFO-DIR-SECTION Math
START-INFO-DIR-ENTRY
* wxMaxima: (wxMaxima).     A gui for a computer algebra system.
END-INFO-DIR-ENTRY
@end format

@macro var {expr}
<\expr\>
@end macro
@end ifinfo

@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{wxMaxima Manual}
@page
@vskip 0pt plus 1filll
Maxima is a computer algebra system that is actively developed and is
sucessfully used in a variety of applications like maths, computer
science and biochemistry.

wxMaxima is a graphical user interface that allows to use all of
maxima's functions providing convenient wizards for accessing the most
commonly used of them.
@end titlepage

@summarycontents
@contents
@node top
@chapter Introduction to wxMaxima
@ifnotinfo
@image{wxMaximaLogo,4cm}

@end ifnotinfo
wxMaxima is a graphical user interface that allows to use all of
maxima's functions providing convenient wizards for accessing the most
commonly used of them. This manual attempts to describe the unique
features that make this program one of the most popular GUIs for
maxima.
@section Maxima and wxMaxima
In the open-source domain big systems are normally split into smaller
projects that are easier to handle for small groups of developers.
For example a CD burner program will consist of a command-line tool
that actually burns the CD and a graphical user interface that allows
the user to use it without having to learn about all the command-line
switches and in fact without using the commandline at all. One
advantage of this approach is that the developing work that
was invested into the command-line program can be shared by many
programs without having to re-invent the wheel: The same cd-burner
command-line program can be used as a ``send-to-cd''-plug-in for a
file manager application, for the ``burn to CD'' function of a music
player and as the CD writer for a DVD backup tool. Another advantage
is that splitting one big task into smaller parts allows to provide
several user interfaces for the same program: A computer algebra
system could be be the logic behind a arbitrary precision calculator
application, it can do automatic transforms of formulas in the
background of a bigger system (e.G.
@uref{http://www.sagemath.org,  Sage}) or actually used as a full-fledged
computer algebra system (which is the case with wxMaxima).
@subsection Maxima
@cindex CAS
@cindex Computer algebra System
Maxima is a full-featured computer algebra system (CAS). In other
words it is a program specialized in solving mathematical problems by
rearranging formulas and finding a formula solving the problem as
opposed to just outputting the numeric value of the result.  

@ifnotinfo
@image{maxima_screenshot,6cm}
@end ifnotinfo

There is extensive documentation for maxima available in the internet
part of which can be found in wxMaxima's help menu. To make access to
the documentation easier if the @key{Help} key is pressed (on most systems
that would be the @key{F1} key) wxmaxima's context-sensitive help feature
will automatically jump to maxima's manual page for the command at the
cursor.
@subsection wxMaxima
wxMaxima is a graphical user interface that provides the full
functionality and flexibility of maxima providing the user with a
graphical display and many features that make working with maxima
easier. For example wxMaxima allows to export any cell's contents (or,
if that is needed, any part of a formula, as well) as text, as LaTeX
or as MathML specification at a simple right-click.

@ifnotinfo
@image{wxMaximaWindow,12cm}
@end ifnotinfo

The calculations itself are done by the maxima command-line
tool in the background.
@section  Worksheet basics
Most of wxMaxima should be self-explaining. Therefore this manual will
concentrate on describing facts that won't need more time to read about
than to be actually explored.
@subsection The worksheet approach
One of the very few things that aren's standard ist that wxMaxima
organizes the data for maxima in cells that are only evaluated (which
means: sent to maxima) when the user request this. This approach might
feel unfamiliar at the first sight. But it drastically eases work with
big documents (where the user won't want every small change at the
beginning automatically to trigger a full re-evaluation of the whole
document) and is very handy for debugging. 

The cells wxMaxima automatically creates on typing some text are maxima
input cells that will eventually be sent to maxima.

@ifnotinfo
@image{InputCell,12cm}
@end ifnotinfo

On evaluation of an input cell's contents the input cell maxima
assigns a label to the input (by default shown in red and recognizable
by the @code{%i}) by which it can be referenced lateron. The output
maxima generates will be shown in a different style and preceded by maxima
by a label beginning with @code{%o}.

Besides the input cells wxMaxima allows for text cells for
documentation, image cells, title cells, chapter
cells and section cells; Every cell has it's own undo buffer so debugging
by changing the values of several cells and then gradually reverting the
unneeded changes is rather easy.

@ifnotinfo
@image{NoiseFilter,12cm}
@end ifnotinfo
@subsection Cells
The worksheet is organized in cells that work like very much like the
styles word processors offer. Each cell can contain one of the following
types of content:
@itemize @bullet
@item one or more lines of maxima input
@item an image
@item a title, section or a subsection
@item Output of or a question from maxima 
@item normal a text block that can for example used for explaining the meaning
      of the math cell's contents.
@end itemize
By default behavior of wxMaxima if text is input is to automatically
create a math cell. Cells of other types can be created
using the Cell menu or using the hotkeys shown there. 
@subsection Horizontal and vertical cursors
While it sometimes is both desirable to allow selecting multiple cells or
only part of a cell for export or Drag-and-Drop beginning such an action
in the middle of one cell and ending it in the middle of another will
most certainly lead to unexpected results.

wxMaxima works around this by defining two types of cursors wxMaxima
will switch between automatically when needed:
@itemize @bullet
@item A vertical cursor that is able to select any number of whole
      cells. This cursor is activated by moving the cursor between
      two cells or by clicking on a space between two cells.
@item And a vertical cursor that works inside a cell. This cursor is
      activated by moving the cursor inside a cell using the mouse
      pointer or the cursor keys.
@end itemize 
As long as the cursor is inside a cell search operations will limit
ther scope to the current cell.
@subsection Command autocompletion
wxMaxima contains an autocompletion feature that is triggered via the menu
(Cell/Complete Word) or alternatively by pressing the key combination
@key{Ctrl}+@key{k}. Besides completing the current command's name the
autocompletion feature is able to show a template for most of the
commands indicating the type (and meaning) of the parameters this
program expects. To activate this feature press
@key{Shift}+@key{Ctrl}+@key{k} or select the respective menu item
(Cell/Show Template).
@section  File Formats
@subsection .mac
@file{.mac} files are ordinary text files that can be read using
maxima's read command:
@example
%i1 read("test.mac");
@end example
They can be used for writing own libraries but since they don't
contain enough structural information they cannot be read back
directly into wxMaxima.
@subsection .wxm
@file{.wxm} files contain the input for maxima, as well as any
text cells, title cells and chapter or section cells the user typed
in. Pictures and maxima's output aren't saved along with the
@file{.wxm} file, though.
@subsection .wxmx
This xml-based file format saves all text and images the work sheet
contains. It is the preferred file format now and comes in two
flavors:
@itemize @bullet
@item Files saved in the version-control friendly @file{.wxmx} format
contain all images in a standard compressed format (@file{.png}) and
a uncompressed copy of the xml tree that contains the structure of the
document and the text typed in by the user. Since the images are
compressed individually and the text is saved as text a version
control system like bazaar, subversion, git or mercurial will only
have to save the elements of the file that actually have changed since
the last version.
@item Files saved in disk space-optimized @file{.wxmx} format are
compressed as a whole. If no version control system is used this will
save disk space:
@itemize @bullet
@item The portion of the file that is pure xml data tends to get
fundamentally smaller when being compressed
@item and after the compression recurring data like image headers
will use up only a fraction of the space they originally did.
@end itemize
This comes at the cost, though, that the change of even a single line
of text in the uncompressed version tends to completely change the
structure of the compressed version of a file. A version control 
system that deals with such a file will - however optimized
it might be on handling differences between binary files -
will therefore have to track (and to store) a much higher number of
differences  between two file versions than necessary;
Since most version control systems compress the data they store on the 
server the server space occupied by the initial version of both
@file{.wxmx} flavors should be nearly identical in size.
@end itemize
@chapter Extensions to maxima
wxMaxima aims to be but a graphical user interface for maxima. In some
cases it adds functionality to Maxima, though. These cases are
described here.
@section Plotting
Plotting (having fundamentally to do with graphics) is a place where a
graphical user interface will have to provide some extensions to the
original program.
@subsection Embedding a plot into the work sheet
Maxima normally instructs the external program gnuplot to open a
separate window for every diagram it creates. Since many times it is
convenient to embed graphs into the work sheet instead wxMaxima
provides its own set of plot functions that don't differ from the
corresponding maxima functions save in their name: They are all
prepended by a ``wx''. For example  @command{wxplot} corresponds to
@command{plot}, @command{wxdraw} corresponds to @command{draw} and
@command{wxhistogram} corresponds to @command{histogram}.
@subsection Making embedded plots bigger or smaller
The plotting routines of wxMaxima respect the variable
@var{wxplot_size} that specifies the size of a plot in pixels.
@example
%i1 wxplot_size:[1200,800];
%o1 [1200,800];

%i2 wxdraw2d(
        explicit(
            sin(x),
            x,1,10
        )
    );
@end example
@subsection Better quality plots
Gnuplot doesn't seem to provide a portable way of determining is it
supports the high-quality bitmap output the cairo library provides.
On systems where it supports these the option @var{wxplot_pngcairo}
enables support for antialiasing an additional line styles.
@subsection Embedding animations into the spreadsheet
The @code{with_slider_draw} command is a version of @code{wxdraw2d}
that does prepare multiple plots and allows to switch between them
by moving the slider on top of the screen. If ImageMagick is installed
wxMaxima even allows to export this animation as an animated gif.

The first two arguments for @code{with_slider_draw} are the name of
the variable that is stepped between the plots and a list of the
values of these variable. The arguments that follow are the ordinary
arguments for @code{wxdraw2d}:
@example
with_slider_draw(
    f,[1,2,3,4,5,6,7,10],
    title=concat("f=",f,"Hz"),
    explicit(
        sin(2*%pi*f*x),
        x,0,1
    ),grid=true
);
@end example
The same functionality for 3d plots is accessible as @code{with_slider_draw3d}.

There is a second set of functions making use of the slider
@itemize @bullet
@item @code{wxanimate_draw} and
@item @code{wxanimate_draw3d}:
@end itemize
@example
wxanimate_draw(
    a, 3,
    explicit(sin(a*x), x, -4, 4),
    title=printf(false, "a=~a", a));
@end example
@subsection Opening multiple plot windows contemporarily
While not being a provided by wxmaxima this feature of maxima (on
setups that support it) sometimes comes in handily. The following
example comes from a post from Mario Rodriguez to the maxima mailing
list: 
@example
load(draw);

/* Parabola in window #1 */
draw2d(terminal=[wxt,1],explicit(x^2,x,-1,1));

/* Parabola in window #2 */
draw2d(terminal=[wxt,2],explicit(x^2,x,-1,1));

/* Paraboloid in window #3 */
draw3d(terminal=[wxt,3],explicit(x^2+y^2,x,-1,1,y,-1,1));
@end example
@section Embedding graphics
if the @file{.wxmx} file format is being used embedding files in a
wxMaxima project can be done as easily as per drag-and-drop. But
sometimes (for example if an image's contents might change lateron)
it is better to tell the file to load the image on evaluation:
@example
show_image("Mann.png");
@end example
@section wxmaximarc
@cindex Startup File
If the maxima user directory there is a text file named @file{wxmaxima-init.mac}
the contents of the file is passed to maxima automatically every time
a new worksheet has been started.

To find out which directory maxima uses as the user directory just
type in the following line:
@example
maxima_userdir;
@end example
The answer from Maxima will specify the name of the directory that the
startup file can be placed in. 
@example
%o1 /home/username/.maxima
@end example
@section Special variables
@itemize @bullet
@item @var{wxfilename} This variable contains the name of the file
%currently opened in wxMaxima.
@item @var{wxplot_pngcairo} tells if wxMaxima tries to use gnuplot's
pngcairo terminal that provides more line styles and a better overall
graphics quality.
@item @var{wxplot_size} defines the size of embedded plots.
@end itemize
@section Pretty-printing 2D output
The function @code{(table_form)} displays a 2D list in a form that is
more readable than the output maxima's default output routine.
@example
table_form(
    [
        [1,2],
        [3,4]
    ]
)$
@end example
@section Bug reporting
wxMaxima provides a few functions that gather bug reporting
information about the current system:
@itemize @bullet
@item @code{wxbuild_info()} gathers information about the currently
running version of wxMaxima
@item @code{wxbug_report()} tells how and where to file bugs
@end itemize
@chapter Troubleshooting
@section Cannot connect to Maxima
Since maxima (the program that does the actual mathematics) and
wxMaxima (providing the easy-to-use user interface) are separate
programs that communicate by the means of a local network connection
the most probably case is that this connection is somehow not
working. For example a firewall could be set up in a way that it
doesn't only prevent against unauthorized connections from the
internet and to the internet but also inter-process-communication
inside the same computer. On Un*x computers another possible reason
would be that the loopback network that provides network connections
between two programs in the same computer isn't properly configured.
@section How to save data from a broken .wxmx file
Internally most modern xml-based formats are ordinary zip-files with
one speciality: the first file in the archive is stored uncompressed
and provides information about what type of program can open this
file.

If the zip signature at the end of the file is still intact
after renaming a broken @file{.wxmx} file to @file{.zip} most operating
systems will provide a way to extract any portion of information that
is stored inside it. The can be done when there is the need of
recovering the original image files from a text processor document.
If the zip signature isn't intact that does not need to be the end
of the world: If wxMaxima during saving detected that something went
wrong there will be a @file{wxmx~} file whose contents might help and
even if there isn't such a file: If the configuration option is set
that @file{.wxmx} files have to be optimized for version control
it is possible to rename the @file{.wxmx} file to a @file{.txt} file
and to use a text editor to recover the file's contents.
@section wxMaxima waits forever for data from maxima
This might be caused by the fact that a closing brace, bracket,
parenthesis or hyphenation mark is missing: In this case maxima waits
until it gets the rest of its input. If that isn't the case the
operating system normally provides a way to see, if maxima is really
working forever trying to solve the current problem.
@section I lost a cell contents and undo doesn't remember
If you still have a way to find out what label maxima has assigned
to the cell just type in the cell's label and it's contents will
reappear. If you don't: Don't panic. Maxima contains a replay feature:
@example
%i1 playback();
@end example
@bye
